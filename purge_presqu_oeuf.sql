-- Copyright (c) 2022 Guillaume Outters
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

-- Vacuum full sur table de type presqu'OEUF (Objet Ã‰crit Une Fois; WORM en anglais, Write Once Read Many).
-- Une table OEUF, Ã§a n'est pas difficile: les anciennes entrÃ©es ne bougent plus du tout.
-- Une table presqu'OEUF, c'est plus compliquÃ©: les entrÃ©es rÃ©centes sont susceptibles de bouger encore un peu, avant stabilisation, elle dÃ©finitive.
-- On ne peut donc placer une limite claire entre les entrÃ©es prÃ©sentes (figÃ©es) et les absentes (Ã  venir).

#if !defined(REACTIVITE)
#define REACTIVITE 3
#endif

#if !defined(TABLE) || !(defined(FRANGE) || (defined(FRANGEMN) && defined(COLCREA)))
Utilisation: purge_presqu_oeuf.sql TABLE=â€¦ [COLID=â€¦] (FRANGE=â€¦|FRANGEMN=â€¦ COLCREA=â€¦) [FAIRE=(1|2)]
  COLID
    Nom de la colonne portant un identifiant entier sÃ©quentiel.
    Par dÃ©faut: id
    /!\ Cette colonne doit Ãªtre en autoincrÃ©ment.
  FRANGE
    Nombre d''entrÃ©es susceptibles de mouvement.
  FRANGEMN
    Nombre de minutes susceptibles de mouvement.
  COLCREA
    Nom de la colonne, de type timestamp, portant la date de crÃ©ation de l''entrÃ©e.
	N.B.: si COLID et COLCREA sont toutes deux mentionnÃ©es, la frange sera calculÃ©e initialement sur COLCREA mais exprimÃ©e sur COLID (considÃ©rÃ©e indexÃ©e et donc plus leste pour les manipulations de masse).
  FAIRE
    Si non dÃ©finie, on n''effectue que la passe prÃ©paratoire (mise de cÃ´tÃ© des donnÃ©es historiques).
    Si 1, la passe prÃ©paratoire est effectuÃ©e, et si elle prend moins de REACTIVITE mn, la passe dÃ©finitive (purge) est effectuÃ©e dans la foulÃ©e.
	Si 2, passe prÃ©paratoire et passe dÃ©finitive sont forcÃ©es.
    Il est prÃ©conisÃ© de lancer une premiÃ¨re fois sans l''option, puis une seconde fois avec l''option FAIRE=1 en pÃ©riode de moindre activitÃ©.
;
#endif

#format delim \t sans-en-tÃªte
#silence

#define TORIG TABLE
#undef TABLE
#if !defined(COLID) and defined(FRANGE)
#define COLID id
#endif

-- Ã€ FAIRE: par date, pour les tables qui n'ont pas d'id mais ont une date crÃ©a indexÃ©e.

#set THISTO concat(TORIG, "_tmp_histo")
#set TFRANGE concat(TORIG, "_tmp_frange")

-- MÃ©nage forcÃ©, si nos tables de travail sont pourries (ex.: plus alignÃ©es avec la table d'origine).
#if defined(FAIRE) and FAIRE == 0
drop table if exists THISTO;
#endif
drop table if exists TFRANGE;

#define TT_VUE 1
#include tailletables.sql

#define HORO '[36m'||to_char(clock_timestamp(), 'HH24:MI:SS.MS')||'[0m '

set intervalstyle to postgres_verbose;
#set T0 `select clock_timestamp()`
select HORO||' === Purge presqu''Å“uf de TORIG ===';

select 'Taille actuelle: '||total from tailletables where 'TORIG' in (table_name, table_schema||'.'||table_name);

-- La premiÃ¨re passe, ramenant tout l'historique (le "fossilisÃ©"), peut Ãªtre un peu longuette.
-- Une seconde passe prendra tout ce qui est apparu entre le dÃ©but et la fin de la premiÃ¨re passe (le "coagulÃ©").
-- La passe dÃ©finitive (dans la transaction) n'aura ainsi Ã  se prÃ©occuper que du minimum.
-- Ex.: avec une frange Ã  15 mn, si la recopie des donnÃ©es historiques (> 15 mn) prend 5 mn,
--      les donnÃ©es qui au lancement du script avaient entre 10 et 15 mn d'anciennetÃ© (donc Ã©taient actives, dans la frange),
--      ont maintenant entre 15 et 20 mn, donc deviennent historiques. Ce sont ces donnÃ©es qui sont traitÃ©es en passe 2.

#if defined(FRANGEMN)
#if defined(COLID)
#set DEBUTFRANGE `select coalesce(min(COLID), 0) from TORIG where COLCREA >= now() - interval 'FRANGEMN minutes'`
#if DEBUTFRANGE == 0
#set DEBUTFRANGE `select coalesce(max(COLID) + 1, 0) from TORIG where COLCREA < now() - interval 'FRANGEMN minutes'`
#endif
#else
ouh lÃ ;
#endif
#else
#set DEBUTFRANGE `with ids as (select COLID from TORIG order by COLID desc limit FRANGE) select coalesce(min(COLID), 0) from ids`
#endif

#if defined(COLID)
#define DANSFRANGE COLID >= DEBUTFRANGE
#else
ouh lÃ ;
#endif

select 'Frange active: '||coalesce(sum(case when DANSFRANGE then 1 end), 0)||' entrÃ©es / '||count(1) from TORIG;

select HORO||' Copie de l''historique...';
#set T0 `select clock_timestamp()`

#if `select count(1) from pg_tables where 'THISTO' in (tablename, schemaname||'.'||tablename)` == 1
#if defined(COLID)
#set DEJAFAITS `select coalesce(max(COLID), 0) from THISTO`
#define COMPLEMENTFRANGE COLID between DEJAFAITS + 1 and DEBUTFRANGE - 1
#else
ouh lÃ ;
-- Ã€ FAIRE?: en fonction de la prÃ©cision de COLCREA, il y a le risque que notre prÃ©cÃ©dente passe soit arrivÃ©e pile entre deux entrÃ©es de mÃªme date; l'une se retrouverait dans THISTO et l'autre non, alors il faudrait adapter en insÃ©rant un delete from THISTO where = ; insert where >= ; au lieu du seul insert where >
#endif
#bavard
insert into THISTO
select * from TORIG
where COMPLEMENTFRANGE;
#else
#bavard
create table THISTO as
select * from TORIG
where not (DANSFRANGE);
#endif
#silence

select HORO||' ... ('||(clock_timestamp() - 'T0')||')';

#if defined(FAIRE) and (FAIRE >= 2 or (FAIRE == 1 and `select case when clock_timestamp() - 'T0' < interval 'REACTIVITE minutes' then 1 else 0 end`))
#set T0 `select clock_timestamp()`

select HORO||' Obtention du verrou...';
#bavard
begin transaction;
lock table TORIG in exclusive mode; -- Ã€ FAIRE: avoir la main moins lourde sur le verrou?
#silence
select HORO||' ... ('||(clock_timestamp() - 'T0')||')';
#set T0 `select clock_timestamp()`
select HORO||' Copie de la frange active...';
#bavard
create table TFRANGE as select * from TORIG where DANSFRANGE;
#silence
select HORO||' ... ('||(clock_timestamp() - 'T0')||')';
#set T0 `select clock_timestamp()`
select HORO||' Purge!...';
#bavard
truncate table TORIG;
#silence
select HORO||' ... ('||(clock_timestamp() - 'T0')||')';
#set T0 `select clock_timestamp()`
select HORO||' Restauration de la frange active...';
#bavard
insert into TORIG select * from TFRANGE;
commit;
#silence
select HORO||' ... ('||(clock_timestamp() - 'T0')||')';
#set T0 `select clock_timestamp()`
select HORO||' Restauration de l''historique...';

#bavard
insert into TORIG select * from THISTO;
#silence

select HORO||' ... ('||(clock_timestamp() - 'T0')||')';
select 'Taille aprÃ¨s: '||total from tailletables where 'TORIG' in (table_name, table_schema||'.'||table_name);
select HORO||' === TerminÃ© TORIG ===';

-- Ã€ FAIRE: drop table THISTO; drop table TFRANGE;

#else

select HORO||' === Recopie de l''historique de TORIG terminÃ© ===';
#undef FAIRE
select '[33mPour effectuer la purge, relancez en ajoutant l''option FAIRE=1[0m';

#endif
